{"version":3,"file":"839.bundle.js","mappings":"6PASA,SAAeA,EAAAA,EAAAA,KAAS,YAAiC,IAA9BC,EAA8B,EAA9BA,SACvBC,QAAQC,IAAI,cAEZ,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAA8CC,EAAAA,EAAAA,YAA9C,eAAOC,EAAP,KAAwBC,EAAxB,KACA,GAAmCC,EAAAA,EAAAA,YAAWC,EAAAA,GAAtCC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,YACbC,GAAqBC,EAAAA,EAAAA,KAAS,kBAAMF,EAAYG,gBAAgB,mBAAiBC,MAEjFC,GAAcC,EAAAA,EAAAA,aAAW,mCAAC,WAAOC,GAAP,uFACLR,EAAUS,QAAQD,GADb,OAEX,KADXE,EADsB,QAGxBb,EAAmB,CAAEc,MAAO,CAAEC,KAAM,WAAYC,QAAS,mCACrC,IAAbH,EACPb,EAAmB,CAAEiB,SAAU,CAAEF,KAAM,WAAYC,QAAS,oBACxC,IAAbH,IACPb,EAAmB,IACnBJ,EAAS,MARe,2CAAD,sDAU5B,CAACG,IAEEmB,EAA4D,CAC9D,CACIC,GAAI,QACJC,KAAM,QACNC,UAAW,UACXC,MAAO,gBACPP,KAAM,QACNQ,MAAO,CACHC,SAAU,WACVC,QAAS,CACLC,MAAO,wJACPV,QAAS,0BAGjBW,MAAO5B,MAAAA,OAAF,EAAEA,EAAiBe,OAE5B,CACIK,GAAI,WACJC,KAAM,WACNC,UAAW,UACXC,MAAO,WACPP,KAAM,WACNQ,MAAO,CAAEC,SAAU,YACnBG,MAAO5B,MAAAA,OAAF,EAAEA,EAAiBkB,WAIhC,OACI,gBAAC,KAAD,CACIW,SAAS,aACTnC,SAAUA,GAAYgB,EACtBoB,WAAYX,EACZY,iBAAiB,WACjBC,aAAc1B,Q,cC9DX,SAAS2B,EAAkBC,EAAKC,IAClC,MAAPA,GAAeA,EAAMD,EAAIE,UAAQD,EAAMD,EAAIE,QAE/C,IAAK,IAAIC,EAAI,EAAGC,EAAO,IAAIC,MAAMJ,GAAME,EAAIF,EAAKE,IAC9CC,EAAKD,GAAKH,EAAIG,GAGhB,OAAOC,E,8DCHM,SAASE,EAAeN,EAAKG,GAC1C,OCLa,SAAyBH,GACtC,GAAIK,MAAME,QAAQP,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKG,GACjD,IAAIK,EAAY,MAAPR,EAAc,KAAyB,oBAAXS,QAA0BT,EAAIS,OAAOC,WAAaV,EAAI,cAE3F,GAAU,MAANQ,EAAJ,CACA,IAIIG,EAAIC,EAJJC,EAAO,GACPC,GAAK,EACLC,GAAK,EAIT,IACE,IAAKP,EAAKA,EAAGQ,KAAKhB,KAAQc,GAAMH,EAAKH,EAAGS,QAAQC,QAC9CL,EAAKM,KAAKR,EAAGlB,QAETU,GAAKU,EAAKX,SAAWC,GAH4BW,GAAK,IAK5D,MAAOM,GACPL,GAAK,EACLH,EAAKQ,EACL,QACA,IACON,GAAsB,MAAhBN,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIO,EAAI,MAAMH,GAIlB,OAAOC,GFtBuB,CAAqBb,EAAKG,KAAM,EAAAkB,EAAA,GAA2BrB,EAAKG,IGLjF,WACb,MAAM,IAAImB,UAAU,6IHIgF,K,4CIJvF,SAASC,EAA4BC,EAAGC,GACrD,GAAKD,EAAL,CACA,GAAiB,iBAANA,EAAgB,OAAO,OAAiBA,EAAGC,GACtD,IAAIC,EAAIC,OAAOC,UAAUC,SAASb,KAAKQ,GAAGM,MAAM,GAAI,GAEpD,MADU,WAANJ,GAAkBF,EAAEO,cAAaL,EAAIF,EAAEO,YAAY5C,MAC7C,QAANuC,GAAqB,QAANA,EAAoBrB,MAAM2B,KAAKR,GACxC,cAANE,GAAqB,2CAA2CO,KAAKP,IAAW,OAAiBF,EAAGC,QAAxG","sources":["webpack://ai-mirror-react-poc/./src/forms/login-form/index.tsx","webpack://ai-mirror-react-poc/./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://ai-mirror-react-poc/./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack://ai-mirror-react-poc/./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack://ai-mirror-react-poc/./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack://ai-mirror-react-poc/./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://ai-mirror-react-poc/./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js"],"sourcesContent":["import { FormComponent } from \"components\";\nimport RootContext from \"contexts/root-context\";\nimport React, { useCallback, useContext, useState } from \"react\"\nimport { useNavigate } from \"react-router\";\nimport { FormInputType } from \"types/form-types\";\nimport { LoginFormErrorsType, LoginFormType, LoginFormValuesTypes } from \"types/stores/user-store\";\nimport { observer } from \"mobx-react-lite\";\nimport { computed } from \"mobx\";\n\nexport default observer(({ onSubmit }: LoginFormType) => {\n    console.log(\"Login Form\");\n\n    const navigate = useNavigate();\n    const [loginFormErrors, setLoginFormErrors] = useState<LoginFormErrorsType>();\n    const { userStore, loaderStore } = useContext(RootContext);\n    const loginRequestStatus = computed(() => loaderStore.getStatusByName(\"LoginRequest\")).get();\n\n    const handleLogin = useCallback(async (data: LoginFormValuesTypes) => {\n        const response = await userStore.onLogin(data);\n        if (response === 3) {\n            setLoginFormErrors({ email: { type: \"validate\", message: \"Email address does not exists\" } });\n        } else if (response === 2) {\n            setLoginFormErrors({ password: { type: \"validate\", message: \"Wrong password\" } });\n        } else if (response === 1) {\n            setLoginFormErrors({});\n            navigate(\"/\");\n        }\n    }, [loginFormErrors]);\n\n    const LoginFormFields: FormInputType<Record<string, unknown>>[] = [\n        {\n            id: \"email\",\n            name: \"email\",\n            className: \"textbox\",\n            label: \"Email address\",\n            type: \"email\",\n            rules: {\n                required: \"Required\",\n                pattern: {\n                    value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n                    message: \"Invalid email address\"\n                }\n            },\n            error: loginFormErrors?.email\n        },\n        {\n            id: \"password\",\n            name: \"password\",\n            className: \"textbox\",\n            label: \"Password\",\n            type: \"password\",\n            rules: { required: \"Required\" },\n            error: loginFormErrors?.password\n        }\n    ];\n\n    return (\n        <FormComponent\n            formName=\"login-form\"\n            onSubmit={onSubmit || handleLogin}\n            formFields={LoginFormFields}\n            submitButtonName=\"Login Me\"\n            isSubmitting={loginRequestStatus}\n        />\n    );\n});","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}"],"names":["observer","onSubmit","console","log","navigate","useNavigate","useState","loginFormErrors","setLoginFormErrors","useContext","RootContext","userStore","loaderStore","loginRequestStatus","computed","getStatusByName","get","handleLogin","useCallback","data","onLogin","response","email","type","message","password","LoginFormFields","id","name","className","label","rules","required","pattern","value","error","formName","formFields","submitButtonName","isSubmitting","_arrayLikeToArray","arr","len","length","i","arr2","Array","_slicedToArray","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","err","unsupportedIterableToArray","TypeError","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","slice","constructor","from","test"],"sourceRoot":""}